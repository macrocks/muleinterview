
#1 -  Introduce yourself and daily activities or project responsibilities
This is generic question and it depends on you how do you represent yourself. E.g.
Myself Amit, Completed graduation in computer science engineering in 2008. having an experience of 12 years in an IT industry. Been part of different domain,complex and industry 
software development lifecycle. Current working with an Insurance client in a complex digital transformation program which is high demading,tight on schedule and with more complexity.
Having an experience as a Developer,Team Leader,Integration Design Lead and Manager. Worked on Retail Banking,Insurance, Hospitapitality domain projects. blah blah blah ......
Currently being as a Mulesoft INtegration Design lead, i need to take care of new business requirement understanding and designing solution which is reusable,adhere to existing design patterns,
scalable. Handling a team at onshore and offshore with respect to design changes,code review,best practices implementation and delivery timeline.

#2 - Which features of Mulesoft are being used in your program?
We are using customer hosted runtime plane(mule version 3.9.2) while for metadata using anypoint platform hosted control plane which gives benefit to control business data into customer hosted environment,
putting dedicated load balancer for custom domain ,certificate solution and on premise/cloud datacentre/db access. URL bases load balancer in NFT env to support scalability.
Exchange for template,api discovery and api details on public portal for third part. Property file encryption using security configuration. Munit for unit testing. Anypoint studio for 
mule application development.Log4j configuration for push logs into graylog/server. Almost(more than 10) all connectors are used for integration e.g. HTTP, WS,FTP, SMTP, Kafka, Mongodb,Salesforce, DB,JMS,VM
All scopes are used in application sync, async, scatter gather, foreach, choice
Note- Make sure whatever feature you will point out here,you should have clear crystal understanding on it and use case.

#3 - what are resposibilities of Mulesoft Integration Design lead -
My job as a design lead is to attend scope gathering sessions with business, understand current scope and if any future scope. All intergrations partners their integration patterns and use case.
After understandning requirement and scope, check existing design patterns and reuse if any can be or come up with new soltion design which will adhere to existing established design patterns or 
present new design pattern to Architecture forum for approval. Handover design solution to offshore and follow up on intergration parties n team for any issues/concerns and feedback.
Present new /existing design changes to architecture forum and deliver those as per timeline. Use best practicse and get it implemented in program.

------------- Mule 4 Specific Questions --------------
#4 - What are the various types of Exception Handling?
Global Exception Handling - use case to use it across mutliple flows with common stratergy
Catch Exception Handling - Try catch can be used acrosss specific flow or component to use it in transaction or specific use case
Choice Exception Handling - 
Default Exception Handling
Rollback Exception Handling

#5 - What you mean by shared resource and how do you achieve it?
Connector/connnector configuration can be made common across application under mule domain project which is called as shared resource. You need to have mule domain project under which
you can define such connectors and then all mule applications will be using mule domain for shared resource. this is available only for customer hosted mule runtime application 
as on cloudhub it doesnt support mule domain project structure.

#6 -Which connector does support transactions and what is difference between XA and non-XA transactions?
Database, JMS, VM connector support transaction feature. Two transaction types-
a.Single Resource(local) - Normally used on single resource,faster and local transaction, should be used on same connector opertaions n use same global config, no nested transactions support
b. Exentended Architecture(XA) - support nested transaction,two phase commit,slower but reliable in distributed systems.
TransactionActions matter a lot in case of XA transactions 
Always Begin - always start a new transaction- in XA it creates new transaction as a nested transaction. in single reosurce already existing transaction then it throws error
Always JOin - joins an existing transaction, throws error if no existing transaction
BeginOrJoin- it joins if existing else begin new transaction
JoinIfpossible- join if exiting transaction but wil not create new tranasction
InDfifferent -Do not treat actions as a transaction
None - Do not initiate a transaction.
Not_supported - Execute outside any existent transaction.

#7 what are different type of variables and attributes and how is scope of those?
in mule 4 we have variables and inbound/outbound attributes which are represented as attributes.
Mule 4 has simpleied mule event model as below -
----------------------
|   Mule Event       |
|   --------------   |
|  | Mule Message |  |
|  |   Attributes |  |
|  |              |  |
|  |   Payload    |  |
|   --------------   |
|                    |
|    Variables       |
|--------------------|
Variables do propogate within flows when referenced using flow reference while they do not propogate over component automatically
Attributes replaces inbound properties of Mule 3 message ,it provide easy access on source attributes as well as we can store them in variables easily #[attributes.queryParams.filter]
Sessions,attachements and outbound properties are not supported in mule 4 now.

#8 In which scenarios you will use scatter-gather and choice case scenarions? real time example from your project.
Scatter-gather - > when u need to gather data from more than one system and they do no have any dependency as well as u need to achieve result within given timeline which is critical.
We used scatter gather in case of multiple third party integration where those independent and important to collect data within a stipulated timeline.
Choice case router is used normally to choose one route depeneding on condition e.g. send message to a flow when country is part of europe. it comes with default case which is
mandatory. Ref Link- https://docs.mulesoft.com/mule-runtime/4.3/about-components

#9 What are scenarios in which you will use cache scope and what are implementation ways?
cache scope is used to store and retrieve frequently used data. We have used cache scope for data which is same for vehicle and coming fro third part.In this case we call thrid party if cache is missed
and store it into cache for next calls as data doesn't get change over period. You can use object store to implement cache scope along with you can database,redis cache or java class  which implements custom cache scope.
Ref Link- https://docs.mulesoft.com/mule-runtime/4.3/cache-scope

#10 what is difference between api autodiscovery vs api proxy and when to use what?
API Proxy typical usage -  Either when you want to leverage API Gateway capabilities and your backend API is not based on Mule Runtime, 
or when your API is based on Mule Runtime but you are unable to define the corresponding Autodiscovery element because it is a closed code.
*you can manage non-mule applications using api manager for api proxy comes into picture
Auto Discovery Usage- onfiguring autodiscovery allows a deployed Mule runtime engine (Mule) application to connect with API Manager to download and manage policies and to generate analytics data. 
Additionally, with autodiscovery, you can configure your Mule applications to act as their own API proxy.
Enhance capabilities of api manager e.g. security,analytics on runtime api.

RefLink- https://docs.mulesoft.com/api-manager/2.x/api-proxy-landing-page
https://docs.mulesoft.com/api-manager/2.x/api-auto-discovery-new-concept

#11 - talk about Mule 4 Runtime improvement over Mule 3 runtime-
Smart – self-tuning, high performance, leverages the complete advantages of non-blocking I/O.	Removes manual overhead and error-prone explicit runtime tuning configuration.No need to explicitly configure thread pool. Runtime does that for you, resulting in optimum performance.

Simplified message model with payload and attributes.	Easy access to a message’s data and metadata.Simplified message model allows users to update messages making it easier to send and receive data across connectors.

Improved error handling with on-error-continue and on-error-propagate.Simplified with built-in errors and predefined errors, specific to connector operations.New Try Scope to handle errors specific to processor.	Easy to handle errors.With on-error-continue and on-error-propagate used in Try Scope, we can decide whether to continue the process or break out.Improved readability of code with a meaningful name for error types (example : DB:QUERY_EXECUTION)

Independent of runtime with the introduction of isolated class loading, completely operation oriented.	Connectors can be upgraded irrespective of the runtime.Completely operation oriented improves developer experience with consistency and predictability of operations across connectors.

Dataweave 2.0 replaces both languages	Easier to learn.Completely function oriented.Powerful with more built-in functions grouped into modules, which can then be imported into other flows.Can package custom reusable functions into a custom module and use it across applications.

Streaming concept is completely abstracted and automatically handled by runtime with the introduction of repeatable streams.	No explicit, error prone configurations.Very helpful when dealing with large payloads.

Can be achieved by configuring target variable at the connector and component level	Easier to use.

#12 - Talk about Mule 4 Changes -

Mule Message
The Mule Message structure has evolved to make it easier to work with properties and to provide more consistency across connectors.

Expression language
The Mule Expression Language has been replaced with the DataWeave language so that you work with data and learn Mule more easily.

Connectors
The approach to connectivity was unified in Mule 4. Mule 3 transports were replaced with new operation-oriented connectors that are easier to use, have better out-of-the-box defaults, and provide new advanced capabilities.

Error Handling
Easier and more powerful error handling with a new Try scope.

DataWeave
DataWeave includes minor changes to simplify the syntax and make it easier to learn.

Studio 7
Features a simplified palette, improved Maven integration, and many other usability improvements.

Runtime engine
The internal execution engine has been updated with a new self-tuning and non-blocking reactive engine. This allows for better performance and scalability out-of-the-box.
https://docs.mulesoft.com/mule-runtime/4.4/intro-overview
Mule runtime engine implements a reactive execution engine, tuned for nonblocking and asynchronous execution.
Mule event processors indicate to Mule whether they are CPU-intensive, CPU-light, or I/O-intensive operations. These workload types help Mule tune for different workloads, so you don’t need to manage thread pools manually to achieve optimum performance. Instead, Mule introspects the available resources (such as memory and CPU cores) in the system to tune thread pools automatically.
Execution Engine
Mule runtime engine implements a reactive execution engine, tuned for nonblocking and asynchronous execution.
To see more details about reactive programming, visit https://en.wikipedia.org/wiki/Reactive_programming.

This task-oriented execution model enables you to take advantage of nonblocking I/O at high concurrency levels transparently, meaning you don’t need to account for threading or asynchronicity in your flows. Each operation inside a Mule flow is a task that provides metadata about its execution, and Mule makes tuning decisions based on that metadata.

Mule event processors indicate to Mule whether they are CPU-intensive, CPU-light, or I/O-intensive operations. These workload types help Mule tune for different workloads, so you don’t need to manage thread pools manually to achieve optimum performance. Instead, Mule introspects the available resources (such as memory and CPU cores) in the system to tune thread pools automatically.

Processing TypesProcessing Types
Mule event processors indicate to Mule what kind of work they do, which can be one of:

CPU-Light
For quick operations (around 10 ms), or nonblocking I/O, for example, a Logger (logger) or HTTP Request operation (http:request). These tasks should not perform any blocking I/O activities. The applicable strings in the logs are CPU_LIGHT and CPU_LIGHT_ASYNC.

Blocking I/O
For I/O that blocks the calling thread, for example, a Database Select operation (db:select) or a SFTP read (sftp:read) . Applicable strings in the logs are BLOCKING and IO.

CPU Intensive
For CPU-bound computations, usually taking more than 10 ms to execute. These tasks should not perform any I/O activities. One example is the Transform Message component (ee:transform). The applicable string in the logs is CPU_INTENSIVE.

See specific component or module documentation to learn the processing type it supports. If none is specified, the default type is CPU Light.

For connectors created with the Mule SDK, the SDK determines the most appropriate processing type based on how the connector is implemented. For details on that mechanism, refer to the Mule SDK documentation.

ThreadingThreading
Starting in Mule 4.3, Mule contains one unique thread pool, called the UBER pool. This thread pool is managed by Mule and shared across all apps in the same Mule instance. At startup, Mule introspects the available resources (such as memory and CPU cores) in the system and tunes automatically for the environment where Mule is running. This algorithm was established through performance testing and found optimal values for most scenarios.

This single thread pool allows Mule to be efficient, requiring significantly fewer threads (and their inherent memory footprint) to process a given workload when compared to Mule 3.

#13 : Difference between DLB vs DLB n exaplin DLB routing rules


